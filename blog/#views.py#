from django.shortcuts import render, get_object_or_404
from .models import Post, Quest2Check, Answer
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.views.generic import ListView
from .forms import EmailPostForm, CheckIfFromForm
from django.core.mail import send_mail
from django.forms import modelformset_factory
from django.http import HttpResponseRedirect, HttpResponse
# Create your views here.

#def post_list(request):
#    object_list = Post.published.all()
###    paginator = Paginator(object_list, 3) # 3 post in each page
#    page = request.GET.get('page')
#    try:
#        posts = paginator.page(page)
#    except PageNotAnInteger:
#####        # if page is not an integer deliver first page
#        posts = paginator.page(1)
#    except EmptyPage:
#        # if is page out of range deliver last page
#        posts = pagainator.page(Pagintor.num_pages)
#    
#    return render(request, 'blog/post/list.html',{'page': page, 'posts': posts})

class PostListView(ListView):
    queryset = Post.published.all()
    context_object_name = 'posts'
    paginate_by = 3
    template_name = 'blog/post/list.html'

def post_detail(request, year, month, day, post):
    post = get_object_or_404(Post, slug=post, status='published', publish__year=year, publish__month=month, publish__day=day)
    print(request.POST)
    return render(request, 'blog/post/detail.html', {'post': post})

def post_share(request, post_id):
    # Retrieve post by id
    post = get_object_or_404(Post, id=post_id, status='published')
    sent = False
    if request.method == 'POST':
        # Form was submitted
        form = EmailPostForm(request.POST)
        if form.is_valid():
            # Form fields passed validation
            cd = form.cleaned_data
            #...send email
            post_url = request.build_absolute_uri(post.get_absolute_url())
            subject = '{} ({}) recommends you reading "{}"'.format(cd['name'], cd['comments'], post.title)

            message = 'Read "{}" at {}\n\n{}\'s comments: {}'.format(post.title, post_url, cd['name'], cd['comments'])
            send_mail(subject, message, 'admin@myblog.com', [cd['to']])
            sent = True
    else:
        form = EmailPostForm()
        return render(request, 'blog/post/share.html',{'post': post, 'form': form})

def quest_visitor(request):

    if request.method == 'POST':

        form = CheckIfFromForm(request.POST)

        
        if form.is_valid():
            c = Answer.objects.all().count() + 1
            ob = Quest2Check.objects.get(id=c)
            an = Answer.objects.create(key_link=ob, answer=form.cleaned_data['answer'])
            an.save()
        
        form = CheckIfFromForm()
        return render(request, 'blog/post/quest.html',{'form': form, 'ob': ob})
    else:
        ob = Quest2Check.objects.get(id=1)
        form = CheckIfFromForm()

        return render(request, 'blog/post/quest.html',{'form': form, 'ob': ob})
        
        

